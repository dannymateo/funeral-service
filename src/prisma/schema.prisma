generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// schema.prisma

model Headquarter {
  id   String @id @default(uuid())
  name String  @unique
  active Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  rooms Room[]
}

model Room {
  id   String @id @default(uuid())
  headquarterId            String
  headquarter              Headquarter            @relation(fields: [headquarterId], references: [id]) 
  name String
  active Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  cameras Camera[]
  serviceS Service[]

  @@unique([name, headquarterId])

}

model AuthCamera {
  id          String   @id @default(uuid())
  userName    String   
  password    String   
  ipAddress   String   
  rtspPort    String   
  endPointRtsp String
  httpPort    String  
  endPointImagePreview String? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  cameras Camera[]
}

model Camera {
  id                String          @id @default(uuid())
  roomId            String
  room              Room            @relation(fields: [roomId], references: [id]) 
  authCameraId      String
  authCamera        AuthCamera      @relation(fields: [authCameraId], references: [id])
  name              String         
  hasPTZ            Boolean         @default(false)
  active            Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt   DateTime? @updatedAt

  movementsPTZ      MovementsPTZ[]
  cameraOnline      CameraOnline[]

  @@index([roomId])
  @@index([authCameraId])
}

model MovementsPTZ {
  id           String   @id @default(uuid())
  cameraId     String
  camera       Camera   @relation(fields: [cameraId], references: [id])
  name         String   
  order        Int     
  endPoint     String   
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([name, cameraId])
  @@unique([cameraId, order])
  @@index([cameraId])
}

model CameraOnline {
  id                String      @id @default(uuid())
  cameraId          String
  camera       Camera   @relation(fields: [cameraId], references: [id])
  endPointStreaming     String      
  password          String     
  status            String      @default("OFFLINE") // 'OFFLINE', 'ONLINE', 'FAIL'
  descriptionStatus String?     
  current           Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt   DateTime? @updatedAt

  @@index([cameraId])
}

model Service {
  id                String      @id @default(uuid())
  roomId            String
  room              Room            @relation(fields: [roomId], references: [id]) 
  // HasPersonalization           Boolean     @default(false) //Indica si tiene personalizaci√≥n
  // HasInteractive           Boolean     @default(false) //Indica si es interactivo
  // HasReminder           Boolean     @default(false) //Indica si es interactivo
  hasStreaming           Boolean     @default(false) //Indica si es streaming
  current           Boolean     @default(false)
  startAt         DateTime    @default(now())
  endAt   DateTime 
  createdAt         DateTime    @default(now())
  updatedAt   DateTime? @updatedAt
}